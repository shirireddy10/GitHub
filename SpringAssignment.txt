10.package org.koushik.javabrains;

import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.FileSystemResource;

public class DrawingApp {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//BeanFactory factory=new XmlBeanFactory(new FileSystemResource("spring.xml"));
     ApplicationContext context=new ClassPathXmlApplicationContext("spring.xml");
		
       
		Triangle triangle=(Triangle) context.getBean("triangle");
		triangle.draw();
		
	}

}

package org.koushik.javabrains;
import java.util.List;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanNameAware;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

public class Triangle implements ApplicationContextAware,BeanNameAware{
	
	private Point pointA;
	private Point pointB;
	private Point pointC;
	private ApplicationContext context = null;
	 
	
	public Point getPointA() {
		return pointA;
	}


	public void setPointA(Point pointA) {
		this.pointA = pointA;
	}


	public Point getPointB() {
		return pointB;
	}


	public void setPointB(Point pointB) {
		this.pointB = pointB;
	}


	public Point getPointC() {
		return pointC;
	}


	public void setPointC(Point pointC) {
		this.pointC = pointC;
	}


	public void draw()
	{
		System.out.println("drawing triangle");
		System.out.println("Point A=("+getPointA().getX() +","+ getPointA().getY() + ")");
		System.out.println("Point B=("+getPointB().getX() + ","+ getPointB().getY()+")");
		System.out.println("Point C=("+getPointC().getX() + ","+ getPointC().getY()+")");
	}


	@Override
	public void setBeanName(String arg0) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void setApplicationContext(ApplicationContext arg0) throws BeansException {
		// TODO Auto-generated method stub
		
	}
	
}

package org.koushik.javabrains;

public class Point {
 private int x;
 private int y;
public int getX() {
	return x;
}
public void setX(int x) {
	this.x = x;
}
public int getY() {
	return y;
}
public void setY(int y) {
	this.y = y;
}
}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
<bean id="parenttriangle" class="org.koushik.javabrains.Triangle">
    <property name="pointA" ref="pointA"/>
    </bean>
   <bean id="triangle1" class="org.koushik.javabrains.Triangle" >
    <property name="pointB" ref="pointB"/>
    <property name="pointC" ref="pointC"/>
    </bean> 
    <bean id="triangle2" class="org.koushik.javabrains.Triangle">
    <property name="pointB" ref="pointB"/>
    </bean>
  <bean id="pointA" class="org.koushik.javabrains.Point">
  <property name="x" value="0" />
  <property name="y" value="0" />
  </bean>
  <bean id="pointB" class="org.koushik.javabrains.Point">
  <property name="x" value="-20" />
  <property name="y" value="0" />
  </bean>
  <bean id="pointC" class="org.koushik.javabrains.Point">
  <property name="x" value="20" />
  <property name="y" value="0" />
  </bean>
  
</beans>
 
  
1.package Spring_Core;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SpringQuestion1
{
	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
			@SuppressWarnings("resource")
			ApplicationContext context = new ClassPathXmlApplicationContext("file:src/main/resources/Addressbean.xml");
			
			Customer customer = (Customer)context.getBean("Customer");
			System.out.println(customer);
			
	}
	
}
package Spring_Core;

public class Address
{
	private String city, street, state, country;
	private int zip;
	
	public String getCity()
	{
		return city;
	}
	
	public void setCity(String city)
	{
		this.city = city;
	}
	
	public String getStreet()
	{
		return street;
	}
	
	public void setStreet(String street)
	{
		this.street = street;
	}
	
	public String getState()
	{
		return state;
	}
	
	public void setState(String state)
	{
		this.state = state;
	}
	
	public String getCountry()
	{
		return country;
	}
	
	public void setCountry(String country)
	{
		this.country = country;
	}
	
	public int getZip()
	{
		return zip;
	}
	
	public void setZip(int zip)
	{
		this.zip = zip;
	}
	
}

AddressBean.xml
<beans xmlns = "http://www.springframework.org/schema/beans"
		xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
		
		<bean id = "Address" class = "Spring_Core.Address">
		<property name = "zip" value = "221"/>
		<property name = "city" value = "London"/>
		<property name = "street" value = "Baker Street"/>
		<property name = "state" value = "World"/>
		<property name = "country" value = "England"/>
		
		</bean>
		
		<bean id = "Customer" class = "Spring_Core.Customer">
		<property name = "customerId" value = "123"/>
		<property name = "customercontact" value = "123456"/>
		<property name = "customerAddress" ref = "Address"/>
		<property name = "customerName" value = "Sherlock Holmes"/>
		</bean>
	
		</beans>


Customer.java
package Spring_Core;

public class Customer
{
	private int customerId;
	private int customercontact;
	private String customerName;
	private Address customerAddress;

	public int getCustomerId()
	{
		return customerId;
	}
	
	public void setCustomerId(int customerId)
	{
		this.customerId = customerId;
	}
	
	public int getCustomercontact()
	{
		return customercontact;
	}
	
	public void setCustomercontact(int customercontact)
	{
		this.customercontact = customercontact;
	}
	
	public Address getCustomerAddress()
	{
		return customerAddress;
	}
	
	public void setCustomerAddress(Address customerAddress)
	{
		this.customerAddress = customerAddress;
	}
	
	public String getCustomerName()
	{
		return customerName;
	}
	
	public void setCustomerName(String customerName)
	{
		this.customerName = customerName;
	}

	public String toString()
	{
		return "Customer Id: "+getCustomerId()+ ", Customer Contact: "+getCustomercontact()+ ", Customer Address: {City: "+getCustomerAddress().getCity()+", Street: "+getCustomerAddress().getStreet()+", State: "+getCustomerAddress().getState()+", Country: "+getCustomerAddress().getCountry()+", Zip: "+getCustomerAddress().getZip()+"}, Customer Name: "+getCustomerName();
	}
	
}

2.package Spring_Core;

import static org.junit.jupiter.api.Assertions.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import org.junit.jupiter.api.Test;

class Question2
{

	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
		 @SuppressWarnings("resource")
		ApplicationContext context = new ClassPathXmlApplicationContext("Coll.xml");
         
         List list = (List) context.getBean("Collections");
          
         System.out.println("List: " + list.getList());
         
	}

}
package Spring_Core;

public class Question
{
	private int questionId;
	private String question, answers;
	public void setQuestionId(int questionId) {
		this.questionId = questionId;
	}
	public void setQuestion(String question) {
		this.question = question;
	}
	public void setAnswers(String answers) {
		this.answers = answers;
	}
	
	public String toString()
	{
		return "Question ID: "+questionId+ ", Questions: "+question+ ", Answers: "+answers+"\n";
	}
	
}

List:

package Spring_Core;

public class Question
{
	private int questionId;
	private String question, answers;
	public void setQuestionId(int questionId) {
		this.questionId = questionId;
	}
	public void setQuestion(String question) {
		this.question = question;
	}
	public void setAnswers(String answers) {
		this.answers = answers;
	}
	
	public String toString()
	{
		return "Question ID: "+questionId+ ", Questions: "+question+ ", Answers: "+answers+"\n";
	}
	
}

Coll.xml

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
 
    <bean id="Collections" class="Spring_Core.List">
        <property name="list">
            <list>
                <ref bean="answers" />
                <ref bean="answers1" />
                <ref bean="answers2" />
            </list>
        </property>
    </bean>
     
    <bean id="answers" class="Spring_Core.Question">
        <property name="answers" value=”Teja"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "123"/>
	</bean>
	
	<bean id="answers1" class="Spring_Core.Question">
		<property name="answers" value="Ritu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "456"/>
	</bean>
	
	<bean id="answers2" class="Spring_Core.Question">
	<property name="answers" value="Manu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "789"/>
	</bean>
        
    </beans>

package Spring_Core;

import static org.junit.jupiter.api.Assertions.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import org.junit.jupiter.api.Test;

class Question2
{

	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
		 @SuppressWarnings("resource")
		ApplicationContext context = new ClassPathXmlApplicationContext("Coll.xml");
         
         List set = (List) context.getBean("Collections");
          
         System.out.println("Set : " + set.getSet());
         
	}

}

Coll.xml


<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
 
    <bean id="Collections" class="Spring_Core.List">
        <property name="set">
            <set>
                <ref bean="answers" />
                <ref bean="answers1" />
                <ref bean="answers2" />
            </set>
        </property>
    </bean>
     
    <bean id="answers" class="Spring_Core.Question">
        <property name="answers" value="Teja"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "123"/>
	</bean>
	
	<bean id="answers1" class="Spring_Core.Question">
		<property name="answers" value="Ritu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "456"/>
	</bean>
	
	<bean id="answers2" class="Spring_Core.Question">
	<property name="answers" value="Manu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "789"/>
	</bean>
        
    </beans>


package Spring_Core;

import static org.junit.jupiter.api.Assertions.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import org.junit.jupiter.api.Test;

class Question2
{

	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
		 @SuppressWarnings("resource")
		ApplicationContext context = new ClassPathXmlApplicationContext("Coll.xml");
         
         List map = (List) context.getBean("Collections");
          
         System.out.println("Map : " + map.getMap());
         
	}

}


Coll.xml


<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
 
    <bean id="Collections" class="Spring_Core.List">
        <property name="map">
            <map>
				<entry key="1" value-ref="answers" />
				<entry key="2" value-ref="answers1" />
                <entry key="3" value-ref="answers2" />
            </map>
        </property>
    </bean>
     
    <bean id="answers" class="Spring_Core.Question">
        <property name="answers" value="Teja"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "123"/>
	</bean>
	
	<bean id="answers1" class="Spring_Core.Question">
		<property name="answers" value="Ritu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "456"/>
	</bean>
	
	<bean id="answers2" class="Spring_Core.Question">
	<property name="answers" value="Manu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "789"/>
	</bean>
        
    </beans>

8.USING INIT AND DESTROY METHOD
package QuestionEight;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class CustomerService implements InitializingBean, DisposableBean {
	private String msg;

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	public void destroy() throws Exception {

		// TODO Auto-generated method stub
		System.out.println("Spring Container is destroy! Customer clean up");
	}

	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub
		System.out.println("Init method after properties are set : " + msg);
	}}

package QuestionEight;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class CustomerService implements InitializingBean, DisposableBean {
	private String msg;

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	public void destroy() throws Exception {

		// TODO Auto-generated method stub
		System.out.println("Spring Container is destroy! Customer clean up");
	}

	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub
		System.out.println("Init method after properties are set : " + msg);
	}}


XML FILE
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

       <bean id="customerService" class="QuestionEight.CustomerService">
		<property name="msg" value="i'm property message" />
       </bean>
		
</beans>

OUTPUT:
Init method after properties are set : i'm property message
Spring Container is destroy! Customer clean up

USING POSTCONDUCT AND PREDESTROY
package EightB;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class MyBean {

	public MyBean() {
		System.out.println("MyBean instance created");
	}

	@PostConstruct
	private void init() {
		System.out.println("Verifying Resources");
	}

	@PreDestroy
	private void shutdown() {
		System.out.println("Shutdown All Resources");
	}

	public void close() {
		System.out.println("Closing All Resources");
	}
}


package EightB;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;

@Configuration
public class MyConfiguration {

	@Bean
	@Scope(value = "singleton")
	public MyBean myBean() {
		return new MyBean();
	}

}


package EightB;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class SpringApp {

	public static void main(String[] args) {
		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
		ctx.register(MyConfiguration.class);
		ctx.refresh();

		MyBean mb1 = ctx.getBean(MyBean.class);
		System.out.println(mb1.hashCode());

		MyBean mb2 = ctx.getBean(MyBean.class);
		System.out.println(mb2.hashCode());

		ctx.close();
	}

}

OUTPUT:
MyBean instance created
Verifying Resources
2145970759
2145970759
Shutdown All Resources
Closing All Resources

9.
public class HelloWorld {
	 public void init() throws Exception
	    {
	        System.out.println(
	            "Bean HelloWorld has been "
	            + "instantiated and I'm "
	            + "the init() method");
	    }
	 
	    // This method executes
	    // when the spring container
	    // is closed
	    public void destroy() throws Exception
	    {
	        System.out.println(
	            "Container has been closed "
	            + "and I'm the destroy() method");
	    }

}

-----

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Client {

	public static void main(String[] args) throws Exception {

		// Loading the Spring XML configuration
		// file into the spring container and
		// it will create the instance of
		// the bean as it loads into container

		ConfigurableApplicationContext cap = new ClassPathXmlApplicationContext("spring.xml");

		// It will close the spring container
		// and as a result invokes the
		// destroy() method
		cap.close();
	}
}
----------
XML file :

<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd">
 
 
 
 <bean id="HelloBean"  class="springcore_example.HelloBean">
 
  <property name ="name" value="sarika">
  </property>
 </bean>

 </beans>


O/P:
Bean HelloWorld has been instantiated and I'm the init() method
Container has been closed and I'm the destroy() method

7.package com.maven7;

import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;

public class Test {  
	public static void main(String[] args) {  
		
		
	
/*
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello Maven'");
String message =  (String)exp.getValue();
System.out.println(message);
*/		
		
/*		
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Welcome     To'.concat('SpringExpression')");                
String message = (String) exp.getValue(); System.out.println(message);
*/

/*		
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello Siri'.bytes"); 
byte[] bytes = (byte[]) exp.getValue();
for(int i=0;i<bytes.length;i++) {
System.out.print(bytes[i]+" "); 
}
*/

/*		
ExpressionParser parser = new SpelExpressionParser();
Expression exp =
     parser.parseExpression("new String('hello    world').toUpperCase()");
String message = exp.getValue(String.class); System.out.println(message);
*/		
		 
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello Siri'.bytes.length");  
int length = (Integer) exp.getValue();  
System.out.println(length);  
		 
}  
}  
Pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.maven7</groupId>
  <artifactId>SPELexpression</artifactId>
  <version>0.0.1-SNAPSHOT</version>
<dependencies>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
	<dependency>
 	   <groupId>org.springframework</groupId>
   	   <artifactId>spring-core</artifactId>
       <version>5.3.15</version>
	</dependency>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-expression -->
 	<dependency>
    	<groupId>org.springframework</groupId>
    	<artifactId>spring-expression</artifactId>
    	<version>5.3.15</version>
 	</dependency>
</dependencies>
</project>


5

 @Resource Annotation
CLASS 1

import org.springframework.beans.factory.annotation.Required;

public class Employee {
 
    private String id;
    private String name;
 
    @Resource(name="mycompany")
   
    private Company company;
 
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    @Required
    public void setName(String name) {
        this.name = name;
    }
    public Company getCompany() {
        return company;
    }
    public void setCompany(Company company) {
        this.company = company;
    }
 
    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", company=" + company.toString() + "]";
    }
}
CLASS 2
package New;

public class Company {
	 
    private String name;
    private String location;
 
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getLocation() {
        return location;
    }
    public void setLocation(String location) {
        this.location = location;
    }
 
    @Override
    public String toString() {
        return "Company [name=" + name + ", location=" + location + "]";
    }
}

CLASS3
package New;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 

 
public class Test {
 
    @SuppressWarnings("resource")
    public static void main(String[] args) {
 
        ApplicationContext context = new ClassPathXmlApplicationContext("n.xml");
 
     
     Employee emp=(Employee) context.getBean("myemployee");
        
        System.out.println(emp.toString());
    }
}

XML FILE
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
    <!-- To activate the '@Resource' annotation in the spring framework -->
    <context:annotation-config />
 
    <bean id="mycompany" class="New.Company">
        <property name="name" value="Test Pvt. Ltd." />
        <property name="location" value="India" />
    </bean>
 
    <bean id="myemployee" class="New.Employee">
        <property name="id" value="126" />
       <property name="name" value="Nam" />
    </bean></beans>
@Inject Annotataion
Class 1


public class Employee {
 
    private String id;
    private String name;
 
    
    @Inject
   
    private Company company;
 
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    @Required
    public void setName(String name) {
        this.name = name;
    }
    public Company getCompany() {
        return company;
    }
    public void setCompany(Company company) {
        this.company = company;
    }
 
    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", company=" + company.toString() + "]";
    }
}


CLASS 2

package New;

public class Company {
	 
    private String name;
    private String location;
 
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getLocation() {
        return location;
    }
    public void setLocation(String location) {
        this.location = location;
    }
 
    @Override
    public String toString() {
        return "Company [name=" + name + ", location=" + location + "]";
    }
}


CLASS 3

package New;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 

 
public class Test {
 
    @SuppressWarnings("resource")
    public static void main(String[] args) {
 
        ApplicationContext context = new ClassPathXmlApplicationContext("n.xml");
 
     
     Employee emp=(Employee) context.getBean("myemployee");
        
        System.out.println(emp.toString());
    }
}



XML FILE


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
    <!-- To activate the '@Resource' annotation in the spring framework -->
    <context:annotation-config />
 
    <bean id="mycompany" class="New.Company">
        <property name="name" value="Test Pvt. Ltd." />
        <property name="location" value="India" />
    </bean>
 
    <bean id="myemployee" class="New.Employee">
        <property name="id" value="126" />
       <property name="name" value="Nam" />
    </bean>
</beans>




OUTPUT:

Jan 25, 2022 2:27:39 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3b0143d3: startup date [Tue Jan 25 14:27:39 IST 2022]; root of context hierarchy
Jan 25, 2022 2:27:39 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [n.xml]
Jan 25, 2022 2:27:39 PM org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor <init>
INFO: JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
Employee [id=126, name=Nam, company=Company [name=Test Pvt. Ltd., location=India]]



